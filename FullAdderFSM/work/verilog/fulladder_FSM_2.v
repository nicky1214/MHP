/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module fulladder_FSM_2 (
    input clk,
    input rst,
    output reg a,
    output reg b,
    output reg cin,
    input s,
    input cout,
    output reg [7:0] state_indicator,
    input autotoggle,
    input man_a,
    input man_b,
    input man_cin
  );
  
  
  
  reg [26:0] M_count_d, M_count_q = 1'h0;
  localparam OOO_state = 4'd0;
  localparam OOI_state = 4'd1;
  localparam OIO_state = 4'd2;
  localparam OII_state = 4'd3;
  localparam IOO_state = 4'd4;
  localparam IOI_state = 4'd5;
  localparam IIO_state = 4'd6;
  localparam III_state = 4'd7;
  localparam ERROR_state = 4'd8;
  
  reg [3:0] M_state_d, M_state_q = OOO_state;
  
  always @* begin
    M_state_d = M_state_q;
    M_count_d = M_count_q;
    
    M_count_d = M_count_q + 1'h1;
    a = 1'h0;
    b = 1'h0;
    cin = 1'h0;
    state_indicator = 8'h00;
    if (autotoggle == 1'h1) begin
      
      case (M_state_q)
        OOO_state: begin
          a = 1'h0;
          b = 1'h0;
          cin = 1'h0;
          state_indicator = 8'h00;
          if (M_count_q[26+0-:1] == 1'h1) begin
            if (cout != 1'h0 || s != 1'h0) begin
              M_state_d = ERROR_state;
            end else begin
              M_state_d = OOI_state;
            end
          end
        end
        OOI_state: begin
          a = 1'h0;
          b = 1'h0;
          cin = 1'h1;
          state_indicator = 8'h01;
          if (M_count_q[26+0-:1] == 1'h0) begin
            if (cout != 1'h0 || s != 1'h1) begin
              M_state_d = ERROR_state;
            end else begin
              M_state_d = OIO_state;
            end
          end
        end
        OIO_state: begin
          a = 1'h0;
          b = 1'h1;
          cin = 1'h0;
          state_indicator = 8'h02;
          if (M_count_q[26+0-:1] == 1'h1) begin
            if (cout != 1'h0 || s != 1'h1) begin
              M_state_d = ERROR_state;
            end else begin
              M_state_d = OII_state;
            end
          end
        end
        OII_state: begin
          a = 1'h0;
          b = 1'h1;
          cin = 1'h1;
          state_indicator = 8'h03;
          if (M_count_q[26+0-:1] == 1'h0) begin
            if (cout != 1'h1 || s != 1'h0) begin
              M_state_d = ERROR_state;
            end else begin
              M_state_d = IOO_state;
            end
          end
        end
        IOO_state: begin
          a = 1'h1;
          b = 1'h0;
          cin = 1'h0;
          state_indicator = 8'h04;
          if (M_count_q[26+0-:1] == 1'h1) begin
            if (cout != 1'h0 || s != 1'h1) begin
              M_state_d = ERROR_state;
            end else begin
              M_state_d = IOI_state;
            end
          end
        end
        IOI_state: begin
          a = 1'h1;
          b = 1'h0;
          cin = 1'h1;
          state_indicator = 8'h05;
          if (M_count_q[26+0-:1] == 1'h0) begin
            if (cout != 1'h1 || s != 1'h0) begin
              M_state_d = ERROR_state;
            end else begin
              M_state_d = IIO_state;
            end
          end
        end
        IIO_state: begin
          a = 1'h1;
          b = 1'h1;
          cin = 1'h0;
          state_indicator = 8'h06;
          if (M_count_q[26+0-:1] == 1'h1) begin
            if (cout != 1'h1 || s != 1'h0) begin
              M_state_d = ERROR_state;
            end else begin
              M_state_d = III_state;
            end
          end
        end
        III_state: begin
          a = 1'h1;
          b = 1'h1;
          cin = 1'h1;
          state_indicator = 8'h07;
          if (M_count_q[26+0-:1] == 1'h0) begin
            if (cout != 1'h1 && s != 1'h1) begin
              M_state_d = ERROR_state;
            end else begin
              M_state_d = OOO_state;
            end
          end
        end
        ERROR_state: begin
          a = 1'h0;
          b = 1'h0;
          cin = 1'h0;
          state_indicator = 8'hff;
          M_state_d = ERROR_state;
        end
      endcase
    end else begin
      a = man_a;
      b = man_b;
      cin = man_cin;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_count_q <= 1'h0;
    end else begin
      M_count_q <= M_count_d;
    end
  end
  
endmodule
